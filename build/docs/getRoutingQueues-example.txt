import com.mypurecloud.sdk.v2.ApiClient;
import com.mypurecloud.sdk.v2.ApiException;
import com.mypurecloud.sdk.v2.Configuration;
import com.mypurecloud.sdk.v2.api.RoutingApi;
import com.mypurecloud.sdk.v2.model.ErrorBody;import com.mypurecloud.sdk.v2.model.QueueEntityListing;

public class ExamplegetRoutingQueues {
    public static void main(String[] args) {
        // Create ApiClient instance
        ApiClient apiClient = ApiClient.Builder.standard()
                .withAccessToken("your_access_token")   // or use authorizeClientCredentials(...), authorizeCodeAuthorization(...), authorizePKCE(...) or authorizeSaml2Bearer(...)
                .withBasePath("https://api.mypurecloud.com") // expected format: https://api.[base path]
                .build();
        
        // Use the ApiClient instance
        Configuration.setDefaultApiClient(apiClient);

        RoutingApi apiInstance = new RoutingApi();
        Integer pageNumber = 1; // Integer | Page number
Integer pageSize = 25; // Integer | Page size
String sortOrder = "asc"; // String | Note: results are sorted by name.
String name = "name_example"; // String | Include only queues with the given name (leading and trailing asterisks allowed)
List<String> id = Arrays.asList(null); // List<String> | Include only queues with the specified ID(s)
List<String> divisionId = Arrays.asList(null); // List<String> | Include only queues in the specified division ID(s)
List<String> peerId = Arrays.asList(null); // List<String> | Include only queues with the specified peer ID(s)
String cannedResponseLibraryId = "cannedResponseLibraryId_example"; // String | Include only queues explicitly associated with the specified canned response library ID
Boolean hasPeer = true; // Boolean | Include only queues with a peer ID
List<String> expand = Arrays.asList(null); // List<String> | Which fields, if any, to expand
        try { 
            // Get list of queues.
            QueueEntityListing result = apiInstance.getRoutingQueues(pageNumber, pageSize, sortOrder, name, id, divisionId, peerId, cannedResponseLibraryId, hasPeer, expand);
            System.out.println(result);
        } catch (ApiException e) {
            System.err.println("Exception when calling RoutingApi#getRoutingQueues");
            e.printStackTrace();
        }
    }
}