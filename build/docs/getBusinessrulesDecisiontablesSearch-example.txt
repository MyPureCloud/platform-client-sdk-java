import com.mypurecloud.sdk.v2.ApiClient;
import com.mypurecloud.sdk.v2.ApiException;
import com.mypurecloud.sdk.v2.Configuration;
import com.mypurecloud.sdk.v2.api.BusinessRulesApi;
import com.mypurecloud.sdk.v2.model.ErrorBody;import com.mypurecloud.sdk.v2.model.DecisionTableListing;

public class ExamplegetBusinessrulesDecisiontablesSearch {
    public static void main(String[] args) {
        // Create ApiClient instance
        ApiClient apiClient = ApiClient.Builder.standard()
                .withAccessToken("your_access_token")   // or use authorizeClientCredentials(...), authorizeCodeAuthorization(...), authorizePKCE(...) or authorizeSaml2Bearer(...)
                .withBasePath("https://api.mypurecloud.com") // expected format: https://api.[base path]
                .build();
        
        // Use the ApiClient instance
        Configuration.setDefaultApiClient(apiClient);

        BusinessRulesApi apiInstance = new BusinessRulesApi();
        String after = "after_example"; // String | The cursor that points to the end of the set of entities that has been returned.
String pageSize = "pageSize_example"; // String | Number of entities to return. Maximum of 100.
String schemaId = "schemaId_example"; // String | Search for decision tables that use the schema with this ID. Cannot be combined with name search. Search results will not be paginated if used.
String name = "name_example"; // String | Search for decision tables with a name that contains the given search string. Search is case insensitive and will match any table that contains this string in any part of the name. Cannot be combined with schema search. Search results will not be paginated if used.
Boolean withPublishedVersion = true; // Boolean | Filters results to only decision tables that have at least one version in Published status
List<String> expand = Arrays.asList(null); // List<String> | Fields to expand in response
List<String> ids = Arrays.asList(null); // List<String> | Decision table IDs to search for
        try { 
            // Search for decision tables.
            DecisionTableListing result = apiInstance.getBusinessrulesDecisiontablesSearch(after, pageSize, schemaId, name, withPublishedVersion, expand, ids);
            System.out.println(result);
        } catch (ApiException e) {
            System.err.println("Exception when calling BusinessRulesApi#getBusinessrulesDecisiontablesSearch");
            e.printStackTrace();
        }
    }
}