import com.mypurecloud.sdk.v2.ApiClient;
import com.mypurecloud.sdk.v2.ApiException;
import com.mypurecloud.sdk.v2.Configuration;
import com.mypurecloud.sdk.v2.api.KnowledgeApi;
import com.mypurecloud.sdk.v2.model.ErrorBody;import com.mypurecloud.sdk.v2.model.DocumentVariationListing;

public class ExamplegetKnowledgeKnowledgebaseDocumentVariations {
    public static void main(String[] args) {
        // Create ApiClient instance
        ApiClient apiClient = ApiClient.Builder.standard()
                .withAccessToken("your_access_token")   // or use authorizeClientCredentials(...), authorizeCodeAuthorization(...), authorizePKCE(...) or authorizeSaml2Bearer(...)
                .withBasePath("https://api.mypurecloud.com") // expected format: https://api.[base path]
                .build();
        
        // Use the ApiClient instance
        Configuration.setDefaultApiClient(apiClient);

        KnowledgeApi apiInstance = new KnowledgeApi();
        String knowledgeBaseId = "knowledgeBaseId_example"; // String | Globally unique identifier for the knowledge base.
String documentId = "documentId_example"; // String | Globally unique identifier for the document.
String before = "before_example"; // String | The cursor that points to the start of the set of entities that has been returned.
String after = "after_example"; // String | The cursor that points to the end of the set of entities that has been returned.
String pageSize = "pageSize_example"; // String | Number of entities to return. Maximum of 200.
String documentState = "documentState_example"; // String | The state of the document.
        try { 
            // Get variations for a document.
            DocumentVariationListing result = apiInstance.getKnowledgeKnowledgebaseDocumentVariations(knowledgeBaseId, documentId, before, after, pageSize, documentState);
            System.out.println(result);
        } catch (ApiException e) {
            System.err.println("Exception when calling KnowledgeApi#getKnowledgeKnowledgebaseDocumentVariations");
            e.printStackTrace();
        }
    }
}