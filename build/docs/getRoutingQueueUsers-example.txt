import com.mypurecloud.sdk.v2.ApiClient;
import com.mypurecloud.sdk.v2.ApiException;
import com.mypurecloud.sdk.v2.Configuration;
import com.mypurecloud.sdk.v2.api.RoutingApi;
import com.mypurecloud.sdk.v2.model.ErrorBody;import com.mypurecloud.sdk.v2.model.QueueMemberEntityListingV1;

public class ExamplegetRoutingQueueUsers {
    public static void main(String[] args) {
        // Create ApiClient instance
        ApiClient apiClient = ApiClient.Builder.standard()
                .withAccessToken("your_access_token")   // or use authorizeClientCredentials(...), authorizeCodeAuthorization(...), authorizePKCE(...) or authorizeSaml2Bearer(...)
                .withBasePath("https://api.mypurecloud.com") // expected format: https://api.[base path]
                .build();
        
        // Use the ApiClient instance
        Configuration.setDefaultApiClient(apiClient);

        RoutingApi apiInstance = new RoutingApi();
        String queueId = "queueId_example"; // String | Queue ID
Integer pageNumber = 1; // Integer | 
Integer pageSize = 25; // Integer | Max value is 100
String sortOrder = "asc"; // String | Note: results are sorted by name.
List<String> expand = Arrays.asList(null); // List<String> | Which fields, if any, to expand.
Boolean joined = true; // Boolean | Filter by joined status
String name = "name_example"; // String | Filter by queue member name
List<String> profileSkills = Arrays.asList(null); // List<String> | Filter by profile skill
List<String> skills = Arrays.asList(null); // List<String> | Filter by skill
List<String> languages = Arrays.asList(null); // List<String> | Filter by language
List<String> routingStatus = Arrays.asList(null); // List<String> | Filter by routing status
List<String> presence = Arrays.asList(null); // List<String> | Filter by presence
        try { 
            // DEPRECATED: use GET /routing/queues/{queueId}/members.  Get the members of this queue.
            QueueMemberEntityListingV1 result = apiInstance.getRoutingQueueUsers(queueId, pageNumber, pageSize, sortOrder, expand, joined, name, profileSkills, skills, languages, routingStatus, presence);
            System.out.println(result);
        } catch (ApiException e) {
            System.err.println("Exception when calling RoutingApi#getRoutingQueueUsers");
            e.printStackTrace();
        }
    }
}