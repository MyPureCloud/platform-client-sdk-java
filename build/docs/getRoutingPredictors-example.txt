//Import classes:
import com.mypurecloud.sdk.v2.ApiClient;
import com.mypurecloud.sdk.v2.ApiException;
import com.mypurecloud.sdk.v2.Configuration;
import com.mypurecloud.sdk.v2.auth.*;
import com.mypurecloud.sdk.v2.api.request.GetRoutingPredictorsRequest;

ApiClient defaultClient = Configuration.getDefaultApiClient();

// Create ApiClient instance
ApiClient apiClient = ApiClient.Builder.standard()
		.withAccessToken(accessToken)
		.withBasePath("https://api.mypurecloud.com")
		.build();

// Use the ApiClient instance
Configuration.setDefaultApiClient(apiClient);

GetRoutingPredictorsRequest apiInstance = new GetRoutingPredictorsRequest();
String before = "before_example"; // String | The cursor that points to the start of the set of entities that has been returned.
String after = "after_example"; // String | The cursor that points to the end of the set of entities that has been returned.
String limit = "limit_example"; // String | Number of entities to return. Maximum of 200. Deprecated in favour of pageSize, use CursorQueryParameters instead.
String pageSize = "pageSize_example"; // String | Number of entities to return. Maximum of 200.
List<String> queueId = Arrays.asList("queueId_example"); // List<String> | Comma-separated list of queue Ids to filter by.
try {
    PredictorListing result = apiInstance.getRoutingPredictors(before, after, limit, pageSize, queueId);
    System.out.println(result);
} catch (ApiException e) {
    System.err.println("Exception when calling GetRoutingPredictorsRequest#getRoutingPredictors");
    e.printStackTrace();
}