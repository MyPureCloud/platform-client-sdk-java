import com.mypurecloud.sdk.v2.ApiClient;
import com.mypurecloud.sdk.v2.ApiException;
import com.mypurecloud.sdk.v2.Configuration;
import com.mypurecloud.sdk.v2.api.AnalyticsApi;
import com.mypurecloud.sdk.v2.model.SessionsResponse;import com.mypurecloud.sdk.v2.model.ErrorBody;

public class ExamplegetAnalyticsBotflowSessions {
    public static void main(String[] args) {
        // Create ApiClient instance
        ApiClient apiClient = ApiClient.Builder.standard()
                .withAccessToken("your_access_token")   // or use authorizeClientCredentials(...), authorizeCodeAuthorization(...), authorizePKCE(...) or authorizeSaml2Bearer(...)
                .withBasePath("https://api.mypurecloud.com") // expected format: https://api.[base path]
                .build();
        
        // Use the ApiClient instance
        Configuration.setDefaultApiClient(apiClient);

        AnalyticsApi apiInstance = new AnalyticsApi();
        String botFlowId = "botFlowId_example"; // String | ID of the bot flow.
String after = "after_example"; // String | The cursor that points to the ID of the last item in the list of entities that has been returned.
String pageSize = "50"; // String | Max number of entities to return. Maximum of 250
String interval = 2023-07-17T08:15:44.586Z/2023-07-26T09:22:33.111Z; // String | Date range filter based on the date the individual resources were completed. UTC is the default if no TZ is supplied, however alternate timezones can be used e.g: '2022-11-22T09:11:11.111+08:00/2022-11-30T07:17:44.586-07'. . Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
String botResultCategories = "botResultCategories_example"; // String | Optional case-insensitive comma separated list of Bot Result Categories to filter sessions by.
String endLanguage = "endLanguage_example"; // String | Optional case-insensitive language code to filter sessions by the language the sessions ended in.
        try { 
            // Get Bot Flow Sessions.
            SessionsResponse result = apiInstance.getAnalyticsBotflowSessions(botFlowId, after, pageSize, interval, botResultCategories, endLanguage);
            System.out.println(result);
        } catch (ApiException e) {
            System.err.println("Exception when calling AnalyticsApi#getAnalyticsBotflowSessions");
            e.printStackTrace();
        }
    }
}