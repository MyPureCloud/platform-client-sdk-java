import com.mypurecloud.sdk.v2.ApiClient;
import com.mypurecloud.sdk.v2.ApiException;
import com.mypurecloud.sdk.v2.Configuration;
import com.mypurecloud.sdk.v2.api.ProcessAutomationApi;
import com.mypurecloud.sdk.v2.model.ErrorBody;import com.mypurecloud.sdk.v2.model.TriggerEntityListing;

public class ExamplegetProcessautomationTriggers {
    public static void main(String[] args) {
        // Create ApiClient instance
        ApiClient apiClient = ApiClient.Builder.standard()
                .withAccessToken("your_access_token")   // or use authorizeClientCredentials(...), authorizeCodeAuthorization(...), authorizePKCE(...) or authorizeSaml2Bearer(...)
                .withBasePath("https://api.mypurecloud.com") // expected format: https://api.[base path]
                .build();
        
        // Use the ApiClient instance
        Configuration.setDefaultApiClient(apiClient);

        ProcessAutomationApi apiInstance = new ProcessAutomationApi();
        String before = "before_example"; // String | The cursor that points to the start of the set of entities that has been returned.
String after = "after_example"; // String | The cursor that points to the end of the set of entities that has been returned.
String pageSize = "pageSize_example"; // String | Number of entities to return. Maximum of 200.
String topicName = "topicName_example"; // String | Topic name(s). Separated by commas
Boolean enabled = true; // Boolean | Boolean indicating desired enabled state of triggers
Boolean hasDelayBy = true; // Boolean | Boolean to filter based on delayBySeconds being set in triggers. Default returns all, true returns only those with delayBySeconds set, false returns those without delayBySeconds set.
        try { 
            // Retrieves all triggers, optionally filtered by query parameters.
            TriggerEntityListing result = apiInstance.getProcessautomationTriggers(before, after, pageSize, topicName, enabled, hasDelayBy);
            System.out.println(result);
        } catch (ApiException e) {
            System.err.println("Exception when calling ProcessAutomationApi#getProcessautomationTriggers");
            e.printStackTrace();
        }
    }
}