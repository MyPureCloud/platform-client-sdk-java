//Import classes:
import com.mypurecloud.sdk.v2.ApiClient;
import com.mypurecloud.sdk.v2.ApiException;
import com.mypurecloud.sdk.v2.Configuration;
import com.mypurecloud.sdk.v2.auth.*;
import com.mypurecloud.sdk.v2.api.request.PostOutboundContactlistContactsRequest;

ApiClient defaultClient = Configuration.getDefaultApiClient();

// Create ApiClient instance
ApiClient apiClient = ApiClient.Builder.standard()
		.withAccessToken(accessToken)
		.withBasePath("https://api.mypurecloud.com")
		.build();

// Use the ApiClient instance
Configuration.setDefaultApiClient(apiClient);

PostOutboundContactlistContactsRequest apiInstance = new PostOutboundContactlistContactsRequest();
String contactListId = "contactListId_example"; // String | Contact List ID
List<WritableDialerContact> body = Arrays.asList(new WritableDialerContact()); // List<WritableDialerContact> | Contact
Boolean priority = true; // Boolean | Contact priority. True means the contact(s) will be dialed next; false means the contact will go to the end of the contact queue.
Boolean clearSystemData = true; // Boolean | Clear system data. True means the system columns (attempts, callable status, etc) stored on the contact will be cleared if the contact already exists; false means they won't.
Boolean doNotQueue = true; // Boolean | Do not queue. True means that updated contacts will not have their positions in the queue altered, so contacts that have already been dialed will not be redialed. For new contacts, this parameter has no effect; False means that updated contacts will be re-queued, according to the 'priority' parameter.
try {
    List<DialerContact> result = apiInstance.postOutboundContactlistContacts(contactListId, body, priority, clearSystemData, doNotQueue);
    System.out.println(result);
} catch (ApiException e) {
    System.err.println("Exception when calling PostOutboundContactlistContactsRequest#postOutboundContactlistContacts");
    e.printStackTrace();
}