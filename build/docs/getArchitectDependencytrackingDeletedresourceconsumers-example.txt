import com.mypurecloud.sdk.v2.ApiClient;
import com.mypurecloud.sdk.v2.ApiException;
import com.mypurecloud.sdk.v2.Configuration;
import com.mypurecloud.sdk.v2.api.ArchitectApi;
import com.mypurecloud.sdk.v2.model.ErrorBody;import com.mypurecloud.sdk.v2.model.DependencyObjectEntityListing;

public class ExamplegetArchitectDependencytrackingDeletedresourceconsumers {
    public static void main(String[] args) {
        // Create ApiClient instance
        ApiClient apiClient = ApiClient.Builder.standard()
                .withAccessToken("your_access_token")   // or use authorizeClientCredentials(...), authorizeCodeAuthorization(...), authorizePKCE(...) or authorizeSaml2Bearer(...)
                .withBasePath("https://api.mypurecloud.com") // expected format: https://api.[base path]
                .build();
        
        // Use the ApiClient instance
        Configuration.setDefaultApiClient(apiClient);

        ArchitectApi apiInstance = new ArchitectApi();
        String name = "name_example"; // String | Name to search for
List<String> objectType = Arrays.asList(null); // List<String> | Object type(s) to search for
String flowFilter = "flowFilter_example"; // String | Show only checkedIn or published flows
Boolean consumedResources = false; // Boolean | Return consumed resources?
List<String> consumedResourceType = Arrays.asList(null); // List<String> | Resource type(s) to return
Integer pageNumber = 1; // Integer | Page number
Integer pageSize = 25; // Integer | Page size
        try { 
            // Get Dependency Tracking objects that consume deleted resources
            DependencyObjectEntityListing result = apiInstance.getArchitectDependencytrackingDeletedresourceconsumers(name, objectType, flowFilter, consumedResources, consumedResourceType, pageNumber, pageSize);
            System.out.println(result);
        } catch (ApiException e) {
            System.err.println("Exception when calling ArchitectApi#getArchitectDependencytrackingDeletedresourceconsumers");
            e.printStackTrace();
        }
    }
}