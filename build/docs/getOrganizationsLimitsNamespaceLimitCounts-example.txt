import com.mypurecloud.sdk.v2.ApiClient;
import com.mypurecloud.sdk.v2.ApiException;
import com.mypurecloud.sdk.v2.Configuration;
import com.mypurecloud.sdk.v2.api.OrganizationApi;
import com.mypurecloud.sdk.v2.model.ErrorBody;import com.mypurecloud.sdk.v2.model.LimitCountListing;

public class ExamplegetOrganizationsLimitsNamespaceLimitCounts {
    public static void main(String[] args) {
        // Create ApiClient instance
        ApiClient apiClient = ApiClient.Builder.standard()
                .withAccessToken("your_access_token")   // or use authorizeClientCredentials(...), authorizeCodeAuthorization(...), authorizePKCE(...) or authorizeSaml2Bearer(...)
                .withBasePath("https://api.mypurecloud.com") // expected format: https://api.[base path]
                .build();
        
        // Use the ApiClient instance
        Configuration.setDefaultApiClient(apiClient);

        OrganizationApi apiInstance = new OrganizationApi();
        String namespaceName = "namespaceName_example"; // String | The namespace to get
String limitName = "limitName_example"; // String | The limit to get
String entityId = "entityId_example"; // String | entity id of the count
String userId = "userId_example"; // String | userid of the count
String cursor = "cursor_example"; // String | Cursor provided when retrieving the last page
        try { 
            // Get estimated limit counts for a namespace and limit name. This is not a source of truth for limit values but a record of estimates to facilitate limit threshold tracking.
            LimitCountListing result = apiInstance.getOrganizationsLimitsNamespaceLimitCounts(namespaceName, limitName, entityId, userId, cursor);
            System.out.println(result);
        } catch (ApiException e) {
            System.err.println("Exception when calling OrganizationApi#getOrganizationsLimitsNamespaceLimitCounts");
            e.printStackTrace();
        }
    }
}