package com.mypurecloud.sdk.v2.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import java.util.Objects;
import java.util.ArrayList;
import java.io.IOException;
import com.mypurecloud.sdk.v2.ApiClient;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.Serializable;
/**
 * PushDeviceInsertRequest
 */

public class PushDeviceInsertRequest  implements Serializable {
  
  private String deviceToken = null;

  private static class NotificationProviderEnumDeserializer extends StdDeserializer<NotificationProviderEnum> {
    public NotificationProviderEnumDeserializer() {
      super(NotificationProviderEnumDeserializer.class);
    }

    @Override
    public NotificationProviderEnum deserialize(JsonParser jsonParser, DeserializationContext ctxt)
            throws IOException {
      JsonNode node = jsonParser.getCodec().readTree(jsonParser);
      return NotificationProviderEnum.fromString(node.toString().replace("\"", ""));
    }
  }
  /**
   * The notification provider for the device (FCM / APNS)
   */
 @JsonDeserialize(using = NotificationProviderEnumDeserializer.class)
  public enum NotificationProviderEnum {
    OUTDATEDSDKVERSION("OutdatedSdkVersion"),
    FCM("FCM"),
    APNS("APNS");

    private String value;

    NotificationProviderEnum(String value) {
      this.value = value;
    }

    @JsonCreator
    public static NotificationProviderEnum fromString(String key) {
      if (key == null) return null;

      for (NotificationProviderEnum value : NotificationProviderEnum.values()) {
        if (key.equalsIgnoreCase(value.toString())) {
          return value;
        }
      }

      return NotificationProviderEnum.values()[0];
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }
  }
  private NotificationProviderEnum notificationProvider = null;
  private String language = null;

  private static class DeviceTypeEnumDeserializer extends StdDeserializer<DeviceTypeEnum> {
    public DeviceTypeEnumDeserializer() {
      super(DeviceTypeEnumDeserializer.class);
    }

    @Override
    public DeviceTypeEnum deserialize(JsonParser jsonParser, DeserializationContext ctxt)
            throws IOException {
      JsonNode node = jsonParser.getCodec().readTree(jsonParser);
      return DeviceTypeEnum.fromString(node.toString().replace("\"", ""));
    }
  }
  /**
   * The type of the device (Android / IoS)
   */
 @JsonDeserialize(using = DeviceTypeEnumDeserializer.class)
  public enum DeviceTypeEnum {
    OUTDATEDSDKVERSION("OutdatedSdkVersion"),
    ANDROID("android"),
    IOS("ios");

    private String value;

    DeviceTypeEnum(String value) {
      this.value = value;
    }

    @JsonCreator
    public static DeviceTypeEnum fromString(String key) {
      if (key == null) return null;

      for (DeviceTypeEnum value : DeviceTypeEnum.values()) {
        if (key.equalsIgnoreCase(value.toString())) {
          return value;
        }
      }

      return DeviceTypeEnum.values()[0];
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }
  }
  private DeviceTypeEnum deviceType = null;

  public PushDeviceInsertRequest() {
    if (ApiClient.LEGACY_EMPTY_LIST == true) { 
    }
  }

  
  /**
   * The device token generated by the network providers
   **/
  public PushDeviceInsertRequest deviceToken(String deviceToken) {
    this.deviceToken = deviceToken;
    return this;
  }
  
  @ApiModelProperty(example = "null", required = true, value = "The device token generated by the network providers")
  @JsonProperty("deviceToken")
  public String getDeviceToken() {
    return deviceToken;
  }
  public void setDeviceToken(String deviceToken) {
    this.deviceToken = deviceToken;
  }


  /**
   * The notification provider for the device (FCM / APNS)
   **/
  public PushDeviceInsertRequest notificationProvider(NotificationProviderEnum notificationProvider) {
    this.notificationProvider = notificationProvider;
    return this;
  }
  
  @ApiModelProperty(example = "null", required = true, value = "The notification provider for the device (FCM / APNS)")
  @JsonProperty("notificationProvider")
  public NotificationProviderEnum getNotificationProvider() {
    return notificationProvider;
  }
  public void setNotificationProvider(NotificationProviderEnum notificationProvider) {
    this.notificationProvider = notificationProvider;
  }


  /**
   * The preferred language of the user (eg. en-us, de, fr)
   **/
  public PushDeviceInsertRequest language(String language) {
    this.language = language;
    return this;
  }
  
  @ApiModelProperty(example = "null", required = true, value = "The preferred language of the user (eg. en-us, de, fr)")
  @JsonProperty("language")
  public String getLanguage() {
    return language;
  }
  public void setLanguage(String language) {
    this.language = language;
  }


  /**
   * The type of the device (Android / IoS)
   **/
  public PushDeviceInsertRequest deviceType(DeviceTypeEnum deviceType) {
    this.deviceType = deviceType;
    return this;
  }
  
  @ApiModelProperty(example = "null", required = true, value = "The type of the device (Android / IoS)")
  @JsonProperty("deviceType")
  public DeviceTypeEnum getDeviceType() {
    return deviceType;
  }
  public void setDeviceType(DeviceTypeEnum deviceType) {
    this.deviceType = deviceType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PushDeviceInsertRequest pushDeviceInsertRequest = (PushDeviceInsertRequest) o;

    return Objects.equals(this.deviceToken, pushDeviceInsertRequest.deviceToken) &&
            Objects.equals(this.notificationProvider, pushDeviceInsertRequest.notificationProvider) &&
            Objects.equals(this.language, pushDeviceInsertRequest.language) &&
            Objects.equals(this.deviceType, pushDeviceInsertRequest.deviceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceToken, notificationProvider, language, deviceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PushDeviceInsertRequest {\n");
    
    sb.append("    deviceToken: ").append(toIndentedString(deviceToken)).append("\n");
    sb.append("    notificationProvider: ").append(toIndentedString(notificationProvider)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

